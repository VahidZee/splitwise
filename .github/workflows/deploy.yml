name: Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ "dev-back", "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch 
        
      - name: Deploy on server
        uses: appleboy/ssh-action@v0.1.4
        env:
          POSTGRESQL_DATABASE: ${{ steps.extract_branch.outputs.branch == 'main' && secrets.POSTGRESQL_MAIN_DATABASE || secrets.POSTGRESQL_DEV_DATABASE }}
          POSTGRESQL_HOST: ${{ secrets.POSTGRESQL_HOST }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRESQL_PORT: ${{ secrets.POSTGRESQL_PORT }}
          POSTGRESQL_USER: ${{ secrets.POSTGRESQL_USER }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ steps.extract_branch.outputs.branch == 'main' && '0' || '1' }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}
          envs: POSTGRESQL_DATABASE,POSTGRESQL_HOST,POSTGRESQL_PASSWORD,POSTGRESQL_PORT,POSTGRESQL_USER,SECRET_KEY,DEBUG,BRANCH 
          script: |
            echo Deploying branch: $BRANCH
            export POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
            export POSTGRESQL_HOST=$POSTGRESQL_HOST
            export POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
            export POSTGRESQL_PORT=$POSTGRESQL_PORT
            export POSTGRESQL_USER=$POSTGRESQL_USER
            export SECRET_KEY=$SECRET_KEY
            export DEBUG=$DEBUG
            printenv
            set -a
            [ ! -d "~/$BRANCH" ] && git clone "http://github.com/${{ github.repository }}.git" ~/$BRANCH
            [ ! -d "~/venvs" ] && mkdir ~/venvs
            [ ! -d "~/venvs/$BRANCH" ] && virtualenv -p python3 ~/venvs/$BRANCH
            cd ~/$BRANCH/
            git checkout $BRANCH
            git pull
            cd ~/$BRANCH/deploy/
            source deploy.sh $BRANCH
            
        
